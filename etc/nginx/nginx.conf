# nginx Configuration File
# http://wiki.nginx.org/Configuration
# Run as a less privileged user for security reasons.
user  nginx;

# How many worker threads to run;
# "auto" sets it to the number of CPU cores available in the system, and
# offers the best performance. Don't set it higher than the number of CPU
# cores if changing this parameter.
# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
# When you need > 8000 * cpu_cores connections, you start optimizing your OS,
# and this is probably the point at which you hire people who are smarter than
# you, as this is *a lot* of requests.
    worker_connections  1024;
    use epoll;
}


http {


    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main    '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';
    log_format backend '$http_x_forwarded_for - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent"';

    access_log  /var/log/nginx/access.log  main;

    server_name_in_redirect off;
    server_tokens      off;

    # Speed up file transfers by using sendfile() to copy directly
    # between descriptors rather than using read()/write().
    sendfile           on;

    # Tell Nginx not to send out partial frames; this increases throughput
    # since TCP frames are filled up before being sent out. (adds TCP_CORK)
    tcp_nopush         off;
    # How long to allow each connection to stay idle; longer values are better
    # for each individual client, particularly for SSL, but means that worker
    # connections are tied up longer. (Default: 65)

    keepalive_timeout  20;

    client_max_body_size    4m;
    client_body_buffer_size 256k;

    if_modified_since before;

    # Compression
    # Enable Gzip compressed.
    gzip              on;
    gzip_http_version 1.0;
    gzip_vary         on;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level   6;
    gzip_types          application/atom+xml
			application/javascript
			application/json
			application/rss+xml
			application/vnd.ms-fontobject
			application/x-font-ttf
			application/x-web-app-manifest+json
			application/xhtml+xml
			application/xml
			font/opentype
			image/svg+xml
			image/x-icon
			text/css
			text/plain
			text/x-component;
		      
    gzip_disable      "MSIE [1-6]\.";
    

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length 256;

    # proxy cache
    proxy_cache_path  /var/cache/nginx/proxy_cache levels=1:2
                      keys_zone=czone:32m max_size=256m inactive=1440m;
    proxy_temp_path   /var/cache/nginx/proxy_temp;
    proxy_cache_key   "$scheme://$host$request_uri";
    proxy_set_header  Host               $host;
    proxy_set_header  X-Real-IP          $remote_addr;
    proxy_set_header  Remote-Addr        $remote_addr;
    proxy_set_header  X-Forwarded-Host   $host;
    proxy_set_header  X-Forwarded-Server $host;
    proxy_set_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header  Accept-Encoding    "";
    proxy_set_header  X-UA-Detect        $mobile;
    proxy_hide_header X-Pingback;
    proxy_hide_header Link;
    proxy_hide_header ETag;
    proxy_connect_timeout 5;
    proxy_send_timeout 10;
    proxy_read_timeout 120;
    proxy_cache_use_stale timeout invalid_header http_500 http_502 http_503 http_504;
    proxy_cache_lock on;
    proxy_cache_lock_timeout 5s;

    # fastcgi cache
    #fastcgi_cache_path /var/cache/nginx/fastcgi_cache levels=1:2
    #                   keys_zone=fastcgizone:32m inactive=60m;
    #fastcgi_cache_key "$scheme$request_method$host$request_uri";
    #fastcgi_cache_use_stale error timeout invalid_header http_500;

    #limit_req_zone $request_method zone=method:1m rate=250r/s;

    upstream backend {
        server unix:/var/run/nginx-backend.sock;
    }

    upstream phpfpm {
        server unix:/var/run/php-fpm.sock;
    }

    include /etc/nginx/conf.d/*.conf;
}
